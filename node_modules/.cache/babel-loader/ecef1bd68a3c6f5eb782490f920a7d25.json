{"remainingRequest":"/Users/zhangoking/study/vue-cli/hello-word/node_modules/babel-loader/lib/index.js!/Users/zhangoking/study/vue-cli/hello-word/src/utils/ajax/middleware/interceptor.js","dependencies":[{"path":"/Users/zhangoking/study/vue-cli/hello-word/src/utils/ajax/middleware/interceptor.js","mtime":1547793288506},{"path":"/Users/zhangoking/study/vue-cli/hello-word/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhangoking/study/vue-cli/hello-word/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport Ajv from 'ajv';\nimport { error, code } from './enum';\nimport responseSchema from './schema';\nvar ajv = new Ajv(); // 数据格式校验\n\nvar loginErrorCode = [code.LOCK, code.FORBIDDEN, code.LOGINTIMEOUT, code.EXPIRED]; // 需要重新登录\n\n/**\n * 数据格式校验\n * @param  {[type]}   response [description]\n * @param  {Function} next     [description]\n * @return {[type]}            [description]\n */\n\nfunction formatIntercepter(response, next) {\n  var valid = ajv.validate(responseSchema, response);\n\n  if (!valid) {\n    // 格式校验失败\n    return error.FORMAT;\n  }\n\n  return next();\n}\n/**\n * 业务状态码校验\n * @param  {[type]}   response [description]\n * @param  {Function} next     [description]\n * @return {[type]}            [description]\n */\n\n\nfunction codeIntercepter(response, next) {\n  var codeState = response.data.code;\n\n  if (codeState !== code.SUCCESS && (codeState < code.SUCMIN || codeState > code.SUCMAX)) {\n    if (codeState === code.LOGOUT) {\n      // 未登录\n      return error.LOGOUT;\n    }\n\n    if (_.includes(loginErrorCode, codeState)) {\n      // 登录失败\n      return error.LOGINERROR;\n    }\n\n    if (codeState === code.AUTHSERVER) {\n      // 权限\n      return error.AUTH;\n    }\n\n    if (codeState === code.LOGINFAIL) {\n      // 用户名密码\n      return error.LOGINFAIL;\n    }\n\n    if (codeState === code.AUTHCODE) {\n      // 验证码\n      return error.AUTHCODE;\n    } // 发生业务错误\n\n\n    return error.SERVER;\n  }\n\n  return next();\n}\n/**\n * 操作状态校验\n * @param  {[type]}   response [description]\n * @param  {Function} next     [description]\n * @return {[type]}            [description]\n */\n\n\nfunction statusIntercepter(response, next) {\n  var res = response.data,\n      status = res.status;\n\n  if (!status) {\n    // 接口错误\n    return error.REQUEST;\n  }\n\n  return next();\n}\n\nexport { formatIntercepter, codeIntercepter, statusIntercepter };",{"version":3,"sources":["/Users/zhangoking/study/vue-cli/hello-word/src/utils/ajax/middleware/interceptor.js"],"names":["Ajv","error","code","responseSchema","ajv","loginErrorCode","LOCK","FORBIDDEN","LOGINTIMEOUT","EXPIRED","formatIntercepter","response","next","valid","validate","FORMAT","codeIntercepter","codeState","data","SUCCESS","SUCMIN","SUCMAX","LOGOUT","_","includes","LOGINERROR","AUTHSERVER","AUTH","LOGINFAIL","AUTHCODE","SERVER","statusIntercepter","res","status","REQUEST"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,SACIC,KADJ,EAEIC,IAFJ,QAGO,QAHP;AAIA,OAAOC,cAAP,MAA2B,UAA3B;AAEA,IAAMC,GAAG,GAAG,IAAIJ,GAAJ,EAAZ,C,CAAsB;;AACtB,IAAMK,cAAc,GAAG,CAACH,IAAI,CAACI,IAAN,EAAYJ,IAAI,CAACK,SAAjB,EAA4BL,IAAI,CAACM,YAAjC,EAA+CN,IAAI,CAACO,OAApD,CAAvB,C,CAAoF;;AAEpF;;;;;;;AAMA,SAASC,iBAAT,CAA2BC,QAA3B,EAAqCC,IAArC,EAA2C;AAEvC,MAAMC,KAAK,GAAGT,GAAG,CAACU,QAAJ,CAAaX,cAAb,EAA6BQ,QAA7B,CAAd;;AAEA,MAAI,CAACE,KAAL,EAAY;AAER;AACA,WAAOZ,KAAK,CAACc,MAAb;AACH;;AACD,SAAOH,IAAI,EAAX;AACH;AAED;;;;;;;;AAMA,SAASI,eAAT,CAAyBL,QAAzB,EAAmCC,IAAnC,EAAyC;AAErC,MAAMK,SAAS,GAAGN,QAAQ,CAACO,IAAT,CAAchB,IAAhC;;AAEA,MAAIe,SAAS,KAAKf,IAAI,CAACiB,OAAnB,KAA+BF,SAAS,GAAGf,IAAI,CAACkB,MAAjB,IAA2BH,SAAS,GAAGf,IAAI,CAACmB,MAA3E,CAAJ,EAAwF;AACpF,QAAIJ,SAAS,KAAKf,IAAI,CAACoB,MAAvB,EAA+B;AAE3B;AACA,aAAOrB,KAAK,CAACqB,MAAb;AACH;;AAED,QAAIC,CAAC,CAACC,QAAF,CAAWnB,cAAX,EAA2BY,SAA3B,CAAJ,EAA2C;AAEvC;AACA,aAAOhB,KAAK,CAACwB,UAAb;AACH;;AACD,QAAIR,SAAS,KAAKf,IAAI,CAACwB,UAAvB,EAAmC;AAAE;AACjC,aAAOzB,KAAK,CAAC0B,IAAb;AACH;;AACD,QAAIV,SAAS,KAAKf,IAAI,CAAC0B,SAAvB,EAAkC;AAAE;AAChC,aAAO3B,KAAK,CAAC2B,SAAb;AACH;;AACD,QAAIX,SAAS,KAAKf,IAAI,CAAC2B,QAAvB,EAAiC;AAAE;AAC/B,aAAO5B,KAAK,CAAC4B,QAAb;AACH,KApBmF,CAsBpF;;;AACA,WAAO5B,KAAK,CAAC6B,MAAb;AACH;;AACD,SAAOlB,IAAI,EAAX;AACH;AAED;;;;;;;;AAMA,SAASmB,iBAAT,CAA2BpB,QAA3B,EAAqCC,IAArC,EAA2C;AAEvC,MAAMoB,GAAG,GAAGrB,QAAQ,CAACO,IAArB;AAAA,MACIe,MAAM,GAAGD,GAAG,CAACC,MADjB;;AAGA,MAAI,CAACA,MAAL,EAAa;AAET;AACA,WAAOhC,KAAK,CAACiC,OAAb;AACH;;AACD,SAAOtB,IAAI,EAAX;AACH;;AAED,SACIF,iBADJ,EAEIM,eAFJ,EAGIe,iBAHJ","sourcesContent":["import Ajv from 'ajv'\nimport {\n    error,\n    code\n} from './enum'\nimport responseSchema from './schema'\n\nconst ajv = new Ajv() // 数据格式校验\nconst loginErrorCode = [code.LOCK, code.FORBIDDEN, code.LOGINTIMEOUT, code.EXPIRED] // 需要重新登录\n\n/**\n * 数据格式校验\n * @param  {[type]}   response [description]\n * @param  {Function} next     [description]\n * @return {[type]}            [description]\n */\nfunction formatIntercepter(response, next) {\n\n    const valid = ajv.validate(responseSchema, response)\n\n    if (!valid) {\n\n        // 格式校验失败\n        return error.FORMAT\n    }\n    return next()\n}\n\n/**\n * 业务状态码校验\n * @param  {[type]}   response [description]\n * @param  {Function} next     [description]\n * @return {[type]}            [description]\n */\nfunction codeIntercepter(response, next) {\n\n    const codeState = response.data.code\n\n    if (codeState !== code.SUCCESS && (codeState < code.SUCMIN || codeState > code.SUCMAX)) {\n        if (codeState === code.LOGOUT) {\n\n            // 未登录\n            return error.LOGOUT\n        }\n\n        if (_.includes(loginErrorCode, codeState)) {\n\n            // 登录失败\n            return error.LOGINERROR\n        }\n        if (codeState === code.AUTHSERVER) { // 权限\n            return error.AUTH\n        }\n        if (codeState === code.LOGINFAIL) { // 用户名密码\n            return error.LOGINFAIL\n        }\n        if (codeState === code.AUTHCODE) { // 验证码\n            return error.AUTHCODE\n        }\n\n        // 发生业务错误\n        return error.SERVER\n    }\n    return next()\n}\n\n/**\n * 操作状态校验\n * @param  {[type]}   response [description]\n * @param  {Function} next     [description]\n * @return {[type]}            [description]\n */\nfunction statusIntercepter(response, next) {\n\n    const res = response.data,\n        status = res.status\n\n    if (!status) {\n\n        // 接口错误\n        return error.REQUEST\n    }\n    return next()\n}\n\nexport {\n    formatIntercepter,\n    codeIntercepter,\n    statusIntercepter\n}\n"]}]}